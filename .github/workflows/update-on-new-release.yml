name: Update on New Sentry Release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight

  # Add a workflow_dispatch event to manually trigger the workflow
  workflow_dispatch:
    
jobs:
  update-on-new-release:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Check for new release in Sentry repository
      id: check-release
      run: |
        # Fetch the latest release tag from the Sentry repository
        LATEST_RELEASE_TAG=$(curl -s https://api.github.com/repos/xai-foundation/sentry/releases/latest | jq -r '.tag_name')
    
        # Read the last line in releases.txt
        LAST_PROCESSED_TAG=$(tail -n 1 releases.txt)
    
        # Check if the latest release tag is different from the last processed tag
        if [ "$LATEST_RELEASE_TAG" != "$LAST_PROCESSED_TAG" ]; then
          echo "New release found: $LATEST_RELEASE_TAG"
          echo "new_release_found=true" >> $GITHUB_OUTPUT
          echo "new_release_tag=$LATEST_RELEASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "No new release found"
          echo "new_release_found=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Configure Git
      if: steps.check-release.outputs.new_release_found == 'true'
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'

    - name: Create a new branch
      if: steps.check-release.outputs.new_release_found == 'true'
      run: |
        git checkout -b update-to-${{ steps.check-release.outputs.new_release_tag }}

    - name: Update releases.txt
      if: steps.check-release.outputs.new_release_found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "${{ steps.check-release.outputs.new_release_tag }}" >> releases.txt
        git add releases.txt
        git commit -m "Update to Sentry release ${{ steps.check-release.outputs.new_release_tag }}"

    - name: Push changes
      if: steps.check-release.outputs.new_release_found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git push origin update-to-${{ steps.check-release.outputs.new_release_tag }}


    - name: Create Pull Request
      if: steps.check-release.outputs.new_release_found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create --title "Version ${{ steps.check-release.outputs.new_release_tag }} Release" --body "update-to-${{ steps.check-release.outputs.new_release_tag }}"

    - name: Merge Pull Request
      if: steps.check-release.outputs.new_release_found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr merge update-to-${{ steps.check-release.outputs.new_release_tag }} --squash --auto --delete-branch

    - name: Create a new release
      if: steps.check-release.outputs.new_release_found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.check-release.outputs.new_release_tag }} --title "Release ${{ steps.check-release.outputs.new_release_tag }}" --notes "New release matching Sentry release ${{ steps.check-release.outputs.new_release_tag }}"
